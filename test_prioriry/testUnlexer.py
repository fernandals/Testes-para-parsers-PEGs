# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

charset_0 = list(chain(range(97, 123)))


class testUnlexer(Grammarinator):

    def __init__(self, *, max_depth=float('inf'), weights=None, cooldown=1.0):
        super(testUnlexer, self).__init__()
        self.unlexer = self
        self.max_depth = max_depth
        self.weights = weights or dict()
        self.cooldown = cooldown

    def EOF(self, *args, **kwargs):
        pass

    @depthcontrol
    def I2(self):
        current = self.create_node(UnlexerRule(name='I2'))
        current += self.create_node(UnlexerRule(src='2'))
        return current
    I2.min_depth = 0

    @depthcontrol
    def I1(self):
        current = self.create_node(UnlexerRule(name='I1'))
        current += self.create_node(UnlexerRule(src='1'))
        return current
    I1.min_depth = 0

    @depthcontrol
    def LETTER(self):
        current = self.create_node(UnlexerRule(name='LETTER'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_0)))
        return current
    LETTER.min_depth = 0

