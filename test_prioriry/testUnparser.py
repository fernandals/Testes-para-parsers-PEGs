# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

import testUnlexer


class testUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(testUnparser, self).__init__()
        self.unlexer = unlexer
    @depthcontrol
    def id3(self):
        current = self.create_node(UnparserRule(name='id3'))
        choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_2', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_2', choice)] = self.unlexer.weights.get(('alt_2', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.id1()
        elif choice == 1:
            current += self.id2()
        return current
    id3.min_depth = 2

    @depthcontrol
    def id2(self):
        current = self.create_node(UnparserRule(name='id2'))
        current += self.unlexer.I2()
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.LETTER()

        return current
    id2.min_depth = 1

    @depthcontrol
    def id1(self):
        current = self.create_node(UnparserRule(name='id1'))
        choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_5', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_5', choice)] = self.unlexer.weights.get(('alt_5', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.I1()
            current += self.unlexer.LETTER()
        elif choice == 1:
            current += self.unlexer.I1()
            current += self.unlexer.LETTER()
            current += self.id1()
        return current
    id1.min_depth = 1

    default_rule = id3

