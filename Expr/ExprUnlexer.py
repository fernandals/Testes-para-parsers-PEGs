# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

charset_0 = list(chain(range(97, 123)))
charset_1 = list(chain(range(13, 14), range(10, 11)))
charset_2 = list(chain(range(48, 58)))


class ExprUnlexer(Grammarinator):

    def __init__(self, *, max_depth=float('inf'), weights=None, cooldown=1.0):
        super(ExprUnlexer, self).__init__()
        self.unlexer = self
        self.max_depth = max_depth
        self.weights = weights or dict()
        self.cooldown = cooldown

    def EOF(self, *args, **kwargs):
        pass

    @depthcontrol
    def ID(self):
        current = self.create_node(UnlexerRule(name='ID'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_0)))

        return current
    ID.min_depth = 0

    @depthcontrol
    def NEWLINE(self):
        current = self.create_node(UnlexerRule(name='NEWLINE'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_1)))
        return current
    NEWLINE.min_depth = 0

    @depthcontrol
    def INT(self):
        current = self.create_node(UnlexerRule(name='INT'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_2)))

        return current
    INT.min_depth = 0

