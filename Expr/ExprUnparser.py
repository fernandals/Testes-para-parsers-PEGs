# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

import ExprUnlexer


class ExprUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(ExprUnparser, self).__init__()
        self.unlexer = unlexer
    @depthcontrol
    def prog(self):
        current = self.create_node(UnparserRule(name='prog'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_1', choice)] = self.unlexer.weights.get(('alt_1', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.expr()
                    current += self.unlexer.NEWLINE()
                elif choice == 1:
                    current += self.unlexer.ID()
                    current += self.create_node(UnlexerRule(src='='))
                    current += self.expr()
                    current += self.unlexer.NEWLINE()

        return current
    prog.min_depth = 0

    @depthcontrol
    def attr(self):
        current = self.create_node(UnparserRule(name='attr'))
        current += self.unlexer.ID()
        current += self.create_node(UnlexerRule(src='='))
        current += self.expr()
        current += self.unlexer.NEWLINE()
        return current
    attr.min_depth = 2

    @depthcontrol
    def expr(self):
        current = self.create_node(UnparserRule(name='expr'))
        choice = self.choice([0 if [2, 2, 1, 1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_6', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_6', choice)] = self.unlexer.weights.get(('alt_6', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.expr()
            choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_12', i), 1) for i, w in enumerate([1, 1])])
            self.unlexer.weights[('alt_12', choice)] = self.unlexer.weights.get(('alt_12', choice), 1) * self.unlexer.cooldown
            if choice == 0:
                current += self.create_node(UnlexerRule(src='*'))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='/'))
            current += self.expr()
        elif choice == 1:
            current += self.expr()
            choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_17', i), 1) for i, w in enumerate([1, 1])])
            self.unlexer.weights[('alt_17', choice)] = self.unlexer.weights.get(('alt_17', choice), 1) * self.unlexer.cooldown
            if choice == 0:
                current += self.create_node(UnlexerRule(src='+'))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='-'))
            current += self.expr()
        elif choice == 2:
            current += self.unlexer.INT()
        elif choice == 3:
            current += self.unlexer.ID()
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='('))
            current += self.expr()
            current += self.create_node(UnlexerRule(src=')'))
        return current
    expr.min_depth = 1

    default_rule = prog

